{
  "version": 3,
  "sources": ["../../node_modules/@joinbox/slide/slide.js", "../../src/js/readAttribute.js", "../../src/js/CollapsibleItem.js"],
  "sourcesContent": ["/* global requestAnimationFrame, HTMLElement */ /**\n * Slides an element up/down or left/right by setting its height explicitly. Only explicit heights\n * can be transitioned through CSS.\n */ var slide = function() {\n    let { element , targetSize , dimension ='y'  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    if (!(element instanceof HTMLElement)) {\n        throw new Error(`slide: expected parameter element to be a HTMLElement, got ${element} instead.`);\n    }\n    if (![\n        'x',\n        'y'\n    ].includes(dimension)) {\n        throw new Error(`slide: expected parameter dimension to be either 'x' or 'y', got ${dimension} instead.`);\n    }\n    const dimensionName = dimension === 'x' ? 'Width' : 'Height';\n    const initialSize = element[`offset${dimensionName}`];\n    targetSize = targetSize ?? element[`scroll${dimensionName}`];\n    requestAnimationFrame(()=>{\n        element.style[dimensionName.toLowerCase()] = `${initialSize}px`;\n        requestAnimationFrame(()=>{\n            element.style[dimensionName.toLowerCase()] = `${targetSize}px`;\n        });\n    });\n    // If element's height is set to its scrollHeight, reset numerical value to 'auto' at the\n    // end of the animation (to account for upcoming window resizes etc.)\n    const handleTransitionEnd = (param)=>{\n        let { target , propertyName  } = param;\n        if (target !== element) return;\n        if (propertyName !== dimensionName.toLowerCase()) return;\n        element.removeEventListener('transitionend', handleTransitionEnd);\n        if (element[`offset${dimensionName}`] === element[`scroll${dimensionName}`]) {\n            requestAnimationFrame(()=>element.style[dimensionName.toLowerCase()] = 'auto');\n        }\n    };\n    element.addEventListener('transitionend', handleTransitionEnd);\n};\nexport { slide as default };\n", "export default function(element, attributeName) {\n    let { transform =(value)=>value , validate =()=>true , expectation  } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const value = element.getAttribute(attributeName);\n    const transformedValue = transform(value);\n    if (!validate(transformedValue)) {\n        throw new Error(`Expected attribute ${attributeName} of element ${element} to be ${expectation}; got ${transformedValue} instead (${value} before the transform function was applied).`);\n    }\n    return transformedValue;\n};\n", "import slide from '@joinbox/slide';\nimport readAttribute from './readAttribute.js';\n/* global window, HTMLElement, CustomEvent, requestAnimationFrame */ /**\n * An element with a summary and a detail section where the detail section is collapsible.\n * If an item in a group is opened\n * - it scrolls to the center of the screen\n * - all other items of the same group are closed\n *\n * @attr data-collapsible-is-open  boolen attribute which indicates if the detail section is open\n * @attr data-collapsible-summary  marks the summary section\n * @attr data-collapsible-detail   marks the detail section\n */ class CollapsibleItem extends HTMLElement {\n    #trigger;\n    #detail;\n    #isOpen;\n    #collapsibleGroupId;\n    static #collapsibleToggleEventName = 'collapsibleToggle';\n    static #collapsibleOpenAttributeName = 'data-collapsible-is-open';\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        this.#trigger = this.querySelector('[data-collapsible-trigger]');\n        this.#detail = this.querySelector('[data-collapsible-detail]');\n        this.#isOpen = false;\n        this.#collapsibleGroupId = readAttribute(this, 'data-collapsible-group-id', {\n            validate: (value)=>!!value,\n            expectation: 'a non-empty string'\n        });\n        if (!(this.#trigger instanceof HTMLElement)) {\n            throw new Error(`CollapsibleItem: this.#trigger is expected to be an instance of HTMLElement. Got ${this.#trigger} instead`);\n        }\n        if (!(this.#detail instanceof HTMLElement)) {\n            throw new Error(`CollapsibleItem: this.#detail is expected to be an instance of HTMLElement. Got ${this.#detail} instead`);\n        }\n        this.#registerSummaryClickListener();\n        this.#registerCollapsibleToggleListener();\n    }\n    #registerSummaryClickListener() {\n        this.#trigger.addEventListener('click', this.#dispatchCollapsibleToggleEvent.bind(this));\n    }\n    #registerCollapsibleToggleListener() {\n        window.addEventListener(CollapsibleItem.#collapsibleToggleEventName, this.#handleCollapsibleToggleEvent.bind(this));\n    }\n    #handleCollapsibleToggleEvent(event) {\n        if (this.#isItself(event.target)) {\n            this.#toggleDetail();\n        } else if (this.#isInSameGroupAs(event.detail.collapsibleGroupId) && this.#isOpen) {\n            this.#closeDetail();\n        }\n    }\n    #toggleDetail() {\n        if (this.#isOpen) {\n            this.#closeDetail();\n        } else {\n            this.#openDetail();\n        }\n    }\n    #openDetail() {\n        this.#isOpen = true;\n        requestAnimationFrame(()=>{\n            this.toggleAttribute(CollapsibleItem.#collapsibleOpenAttributeName, true);\n        });\n        slide({\n            element: this.#detail\n        });\n        this.#scrollIntoView();\n    }\n    #closeDetail() {\n        this.#isOpen = false;\n        requestAnimationFrame(()=>{\n            this.toggleAttribute(CollapsibleItem.#collapsibleOpenAttributeName, false);\n        });\n        slide({\n            element: this.#detail,\n            targetSize: 0\n        });\n    }\n    #scrollIntoView() {\n        this.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n        });\n    }\n    #dispatchCollapsibleToggleEvent() {\n        const payload = {\n            bubbles: true,\n            detail: {\n                collapsibleGroupId: this.#collapsibleGroupId\n            }\n        };\n        this.dispatchEvent(new CustomEvent(CollapsibleItem.#collapsibleToggleEventName, payload));\n    }\n    #isInSameGroupAs(collapsibleGroupId) {\n        return collapsibleGroupId === this.#collapsibleGroupId;\n    }\n    #isItself(item) {\n        return item === this;\n    }\n}\nif (!window.customElements.get('collapsible-item')) {\n    window.customElements.define('collapsible-item', CollapsibleItem);\n}\n"],
  "mappings": "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",
  "names": ["value"]
}
